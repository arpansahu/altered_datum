{"ast":null,"code":"var _jsxFileName = \"/Users/arpansahu/projects/profile/altered_datum/src/components/auth/reset.js\";\nimport React, { useState } from 'react';\nimport axiosInstance from '../../axios';\nimport { useHistory, useParams } from 'react-router-dom'; // MaterialUI\n\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport HeaderForGuest from '../headerforguest';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport VisibilityOffTwoToneIcon from \"@material-ui/icons/VisibilityOffTwoTone\";\nimport VisibilityTwoToneIcon from \"@material-ui/icons/VisibilityTwoTone\";\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  form: {\n    width: '100%',\n    // Fix IE 11 issue.\n    marginTop: theme.spacing(3)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  },\n  passwordEye: {\n    color: \"rgba(131,153,167,0.9)\",\n    opacity: 0.7\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark\n  },\n  success: {\n    backgroundColor: theme.palette.success.main\n  }\n}));\nconst PASSWORD_REGEX = \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,20})\";\nexport default function ResetPassword() {\n  const history = useHistory();\n  const {\n    uidb64,\n    token\n  } = useParams();\n  const initialFormData = {\n    password: '',\n    password_two: ''\n  };\n  const [formData, updateFormData] = useState(initialFormData);\n  const [passwordsMatch, updatePasswordsMatch] = useState({\n    errorOpen: false,\n    error: \"\"\n  });\n  const [message, updateMessage] = useState({\n    messageOpen: false,\n    data: \"\"\n  });\n  const [hidePassword, setHidePassword] = useState(true);\n  const [hidePasswordTwo, setHidePasswordTwo] = useState(true);\n\n  const handleChange = e => {\n    updateFormData({ ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (formData.password === formData.password_two && PASSWORD_REGEX.test(formData.password)) {\n      updatePasswordsMatch({\n        errorOpen: false,\n        error: \"\"\n      });\n      axiosInstance.post(`user/account/resetpassword/`, {\n        uidb64: uidb64,\n        token: token,\n        password1: formData.password,\n        password2: formData.password_two\n      }).then(() => {\n        updateMessage({\n          messageOpen: true,\n          data: \"Password reset successfully\"\n        });\n        setTimeout(() => {\n          history.push('/login');\n        }, 3000);\n      }).catch(error => {\n        let errorMsg = \"Something went wrong. Please try again.\";\n\n        if (error.response) {\n          if (error.response.status === 400) {\n            errorMsg = \"Reset link expired or already used\";\n          } else if (error.response.status === 206) {\n            errorMsg = \"Passwords do not match\";\n          }\n        }\n\n        updatePasswordsMatch({\n          errorOpen: true,\n          error: errorMsg\n        });\n      });\n    } else if (formData.password !== formData.password_two) {\n      updatePasswordsMatch({\n        errorOpen: true,\n        error: \"Both passwords should be the same\"\n      });\n    }\n  };\n\n  const showPassword = () => {\n    setHidePassword(!hidePassword);\n  };\n\n  const showPasswordTwo = () => {\n    setHidePasswordTwo(!hidePasswordTwo);\n  };\n\n  const errorClose = () => {\n    updatePasswordsMatch({\n      errorOpen: false,\n      error: \"\"\n    });\n  };\n\n  const messageClose = () => {\n    updateMessage({\n      messageOpen: false,\n      data: \"\"\n    });\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(HeaderForGuest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }, \"Reset Password\"), /*#__PURE__*/React.createElement(ValidatorForm, {\n    className: classes.form,\n    noValidate: true,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TextValidator, {\n    type: hidePassword ? \"password\" : \"input\",\n    InputProps: {\n      endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 45\n        }\n      }, hidePassword ? /*#__PURE__*/React.createElement(VisibilityOffTwoToneIcon, {\n        fontSize: \"default\",\n        className: classes.passwordEye,\n        onClick: showPassword,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 53\n        }\n      }) : /*#__PURE__*/React.createElement(VisibilityTwoToneIcon, {\n        fontSize: \"default\",\n        className: classes.passwordEye,\n        onClick: showPassword,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 53\n        }\n      }))\n    },\n    variant: \"outlined\",\n    required: true,\n    fullWidth: true,\n    name: \"password\",\n    label: \"Password\",\n    id: \"password\",\n    autoComplete: \"current-password\",\n    onChange: handleChange,\n    value: formData.password,\n    validators: ['required', `matchRegexp:${PASSWORD_REGEX}`],\n    errorMessages: ['This field is required', 'The password must be strong with 8-20 characters, including upper and lower case letters, a number, and a special character.'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(TextValidator, {\n    type: hidePasswordTwo ? \"password\" : \"input\",\n    InputProps: {\n      endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 45\n        }\n      }, hidePasswordTwo ? /*#__PURE__*/React.createElement(VisibilityOffTwoToneIcon, {\n        fontSize: \"default\",\n        className: classes.passwordEye,\n        onClick: showPasswordTwo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 53\n        }\n      }) : /*#__PURE__*/React.createElement(VisibilityTwoToneIcon, {\n        fontSize: \"default\",\n        className: classes.passwordEye,\n        onClick: showPasswordTwo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 53\n        }\n      }))\n    },\n    variant: \"outlined\",\n    required: true,\n    fullWidth: true,\n    name: \"password_two\",\n    label: \"Confirm Password\",\n    id: \"password_two\",\n    autoComplete: \"current-password\",\n    onChange: handleChange,\n    value: formData.password_two,\n    validators: ['required', `matchRegexp:${PASSWORD_REGEX}`],\n    errorMessages: ['This field is required', 'The password must be strong with 8-20 characters, including upper and lower case letters, a number, and a special character.'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 33\n    }\n  })), passwordsMatch.error && /*#__PURE__*/React.createElement(Snackbar, {\n    variant: \"error\",\n    key: passwordsMatch.error,\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"center\"\n    },\n    open: passwordsMatch.errorOpen,\n    onClose: errorClose,\n    autoHideDuration: 3000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(SnackbarContent, {\n    className: classes.error,\n    message: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(ErrorIcon, {\n      fontSize: \"large\",\n      color: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        marginLeft: \"8px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 49\n      }\n    }, passwordsMatch.error)),\n    action: [/*#__PURE__*/React.createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"close\",\n      onClick: errorClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(CloseIcon, {\n      color: \"inherit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 49\n      }\n    }))],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 37\n    }\n  })), message.data && /*#__PURE__*/React.createElement(Snackbar, {\n    variant: \"success\",\n    severity: \"success\",\n    key: message.data,\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"center\"\n    },\n    open: message.messageOpen,\n    onClose: messageClose,\n    autoHideDuration: 3000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(SnackbarContent, {\n    className: classes.success,\n    message: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        color: \"green\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(CheckCircleOutlineIcon, {\n      fontSize: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        marginLeft: \"8px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 49\n      }\n    }, message.data)),\n    action: [/*#__PURE__*/React.createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"close\",\n      onClick: messageClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(CloseIcon, {\n      style: {\n        color: \"green\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 49\n      }\n    }))],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 25\n    }\n  }, \"Reset Password\")))));\n}","map":{"version":3,"sources":["/Users/arpansahu/projects/profile/altered_datum/src/components/auth/reset.js"],"names":["React","useState","axiosInstance","useHistory","useParams","Button","CssBaseline","Typography","Grid","makeStyles","Container","HeaderForGuest","ValidatorForm","TextValidator","VisibilityOffTwoToneIcon","VisibilityTwoToneIcon","InputAdornment","Snackbar","SnackbarContent","IconButton","ErrorIcon","CloseIcon","CheckCircleOutlineIcon","useStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","form","width","submit","margin","passwordEye","color","opacity","error","backgroundColor","palette","dark","success","main","PASSWORD_REGEX","ResetPassword","history","uidb64","token","initialFormData","password","password_two","formData","updateFormData","passwordsMatch","updatePasswordsMatch","errorOpen","message","updateMessage","messageOpen","data","hidePassword","setHidePassword","hidePasswordTwo","setHidePasswordTwo","handleChange","e","target","name","value","handleSubmit","preventDefault","test","post","password1","password2","then","setTimeout","push","catch","errorMsg","response","status","showPassword","showPasswordTwo","errorClose","messageClose","classes","endAdornment","vertical","horizontal","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport axiosInstance from '../../axios';\nimport { useHistory, useParams } from 'react-router-dom';\n// MaterialUI\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport HeaderForGuest from '../headerforguest';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport VisibilityOffTwoToneIcon from \"@material-ui/icons/VisibilityOffTwoTone\";\nimport VisibilityTwoToneIcon from \"@material-ui/icons/VisibilityTwoTone\";\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    passwordEye: {\n        color: \"rgba(131,153,167,0.9)\",\n        opacity: 0.7,\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    success: {\n        backgroundColor: theme.palette.success.main,\n    },\n}));\n\nconst PASSWORD_REGEX = \"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,20})\";\n\nexport default function ResetPassword() {\n    const history = useHistory();\n    const { uidb64, token } = useParams();\n\n    const initialFormData = {\n        password: '',\n        password_two: '',\n    };\n\n    const [formData, updateFormData] = useState(initialFormData);\n    const [passwordsMatch, updatePasswordsMatch] = useState({ errorOpen: false, error: \"\" });\n    const [message, updateMessage] = useState({ messageOpen: false, data: \"\" });\n    const [hidePassword, setHidePassword] = useState(true);\n    const [hidePasswordTwo, setHidePasswordTwo] = useState(true);\n\n    const handleChange = (e) => {\n        updateFormData({\n            ...formData,\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (formData.password === formData.password_two && PASSWORD_REGEX.test(formData.password)) {\n            updatePasswordsMatch({ errorOpen: false, error: \"\" });\n            axiosInstance\n                .post(`user/account/resetpassword/`, {\n                    uidb64: uidb64,\n                    token: token,\n                    password1: formData.password,\n                    password2: formData.password_two,\n                })\n                .then(() => {\n                    updateMessage({ messageOpen: true, data: \"Password reset successfully\" });\n                    setTimeout(() => {\n                        history.push('/login');\n                    }, 3000);\n                })\n                .catch((error) => {\n                    let errorMsg = \"Something went wrong. Please try again.\";\n                    if (error.response) {\n                        if (error.response.status === 400) {\n                            errorMsg = \"Reset link expired or already used\";\n                        } else if (error.response.status === 206) {\n                            errorMsg = \"Passwords do not match\";\n                        }\n                    }\n                    updatePasswordsMatch({ errorOpen: true, error: errorMsg });\n                });\n        } else if (formData.password !== formData.password_two) {\n            updatePasswordsMatch({ errorOpen: true, error: \"Both passwords should be the same\" });\n        }\n    };\n\n    const showPassword = () => {\n        setHidePassword(!hidePassword);\n    };\n\n    const showPasswordTwo = () => {\n        setHidePasswordTwo(!hidePasswordTwo);\n    };\n\n    const errorClose = () => {\n        updatePasswordsMatch({ errorOpen: false, error: \"\" });\n    };\n\n    const messageClose = () => {\n        updateMessage({ messageOpen: false, data: \"\" });\n    };\n\n    const classes = useStyles();\n\n    return (\n        <div className=\"App\">\n            <HeaderForGuest />\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <div className={classes.paper}>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Reset Password\n                    </Typography>\n                    <ValidatorForm className={classes.form} noValidate onSubmit={handleSubmit}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <TextValidator\n                                    type={hidePassword ? \"password\" : \"input\"}\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                {hidePassword ? (\n                                                    <VisibilityOffTwoToneIcon\n                                                        fontSize=\"default\"\n                                                        className={classes.passwordEye}\n                                                        onClick={showPassword}\n                                                    />\n                                                ) : (\n                                                    <VisibilityTwoToneIcon\n                                                        fontSize=\"default\"\n                                                        className={classes.passwordEye}\n                                                        onClick={showPassword}\n                                                    />\n                                                )}\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    id=\"password\"\n                                    autoComplete=\"current-password\"\n                                    onChange={handleChange}\n                                    value={formData.password}\n                                    validators={['required', `matchRegexp:${PASSWORD_REGEX}`]}\n                                    errorMessages={[\n                                        'This field is required',\n                                        'The password must be strong with 8-20 characters, including upper and lower case letters, a number, and a special character.',\n                                    ]}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextValidator\n                                    type={hidePasswordTwo ? \"password\" : \"input\"}\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                {hidePasswordTwo ? (\n                                                    <VisibilityOffTwoToneIcon\n                                                        fontSize=\"default\"\n                                                        className={classes.passwordEye}\n                                                        onClick={showPasswordTwo}\n                                                    />\n                                                ) : (\n                                                    <VisibilityTwoToneIcon\n                                                        fontSize=\"default\"\n                                                        className={classes.passwordEye}\n                                                        onClick={showPasswordTwo}\n                                                    />\n                                                )}\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    name=\"password_two\"\n                                    label=\"Confirm Password\"\n                                    id=\"password_two\"\n                                    autoComplete=\"current-password\"\n                                    onChange={handleChange}\n                                    value={formData.password_two}\n                                    validators={['required', `matchRegexp:${PASSWORD_REGEX}`]}\n                                    errorMessages={[\n                                        'This field is required',\n                                        'The password must be strong with 8-20 characters, including upper and lower case letters, a number, and a special character.',\n                                    ]}\n                                />\n                            </Grid>\n                            {passwordsMatch.error && (\n                                <Snackbar\n                                    variant=\"error\"\n                                    key={passwordsMatch.error}\n                                    anchorOrigin={{\n                                        vertical: \"bottom\",\n                                        horizontal: \"center\",\n                                    }}\n                                    open={passwordsMatch.errorOpen}\n                                    onClose={errorClose}\n                                    autoHideDuration={3000}\n                                >\n                                    <SnackbarContent\n                                        className={classes.error}\n                                        message={\n                                            <div>\n                                                <ErrorIcon fontSize=\"large\" color=\"error\" />\n                                                <span style={{ marginLeft: \"8px\" }}>{passwordsMatch.error}</span>\n                                            </div>\n                                        }\n                                        action={[\n                                            <IconButton key=\"close\" aria-label=\"close\" onClick={errorClose}>\n                                                <CloseIcon color=\"inherit\" />\n                                            </IconButton>,\n                                        ]}\n                                    />\n                                </Snackbar>\n                            )}\n                            {message.data && (\n                                <Snackbar\n                                    variant=\"success\"\n                                    severity=\"success\"\n                                    key={message.data}\n                                    anchorOrigin={{\n                                        vertical: \"bottom\",\n                                        horizontal: \"center\",\n                                    }}\n                                    open={message.messageOpen}\n                                    onClose={messageClose}\n                                    autoHideDuration={3000}\n                                >\n                                    <SnackbarContent\n                                        className={classes.success}\n                                        message={\n                                            <div style={{ color: \"green\" }}>\n                                                <CheckCircleOutlineIcon fontSize=\"large\" />\n                                                <span style={{ marginLeft: \"8px\" }}>{message.data}</span>\n                                            </div>\n                                        }\n                                        action={[\n                                            <IconButton key=\"close\" aria-label=\"close\" onClick={messageClose}>\n                                                <CloseIcon style={{ color: \"green\" }} />\n                                            </IconButton>,\n                                        ]}\n                                    />\n                                </Snackbar>\n                            )}\n                        </Grid>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                        >\n                            Reset Password\n                        </Button>\n                    </ValidatorForm>\n                </div>\n            </Container>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}