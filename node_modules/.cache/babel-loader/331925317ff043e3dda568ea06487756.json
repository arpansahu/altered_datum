{"ast":null,"code":"var _jsxFileName = \"/Users/arpansahu/projects/profile/altered_datum/src/components/ErrorBoundary.js\";\nimport React, { Component } from 'react';\nexport class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return {\n      hasError: true\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {// You can also log the error to an error reporting service\n    // logErrorToMyService(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 18\n        }\n      }, \"Something went wrong.\");\n    }\n\n    return this.props.children;\n  }\n\n}\nexport default ErrorBoundary;","map":{"version":3,"sources":["/Users/arpansahu/projects/profile/altered_datum/src/components/ErrorBoundary.js"],"names":["React","Component","ErrorBoundary","constructor","props","state","hasError","getDerivedStateFromError","error","componentDidCatch","errorInfo","render","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,MAAMC,aAAN,SAA4BD,SAA5B,CAAsC;AACzCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAb;AACD;;AAED,SAAOC,wBAAP,CAAgCC,KAAhC,EAAuC;AACrC;AACA,WAAO;AAAEF,MAAAA,QAAQ,EAAE;AAAZ,KAAP;AACD;;AAEDG,EAAAA,iBAAiB,CAACD,KAAD,EAAQE,SAAR,EAAmB,CAClC;AACA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKN,KAAL,CAAWC,QAAf,EAAyB;AACvB;AACA,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AACD;;AAED,WAAO,KAAKF,KAAL,CAAWQ,QAAlB;AACD;;AAvBsC;AA0B7C,eAAeV,aAAf","sourcesContent":["import React, { Component } from 'react'\n\nexport class ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n      }\n    \n      static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n      }\n    \n      componentDidCatch(error, errorInfo) {\n        // You can also log the error to an error reporting service\n        // logErrorToMyService(error, errorInfo);\n      }\n\n      render() {\n        if (this.state.hasError) {\n          // You can render any custom fallback UI\n          return <h1>Something went wrong.</h1>;\n        }\n    \n        return this.props.children; \n      }\n}\n\nexport default ErrorBoundary\n\n"]},"metadata":{},"sourceType":"module"}